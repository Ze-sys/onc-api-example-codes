
The following samples illustrate how to use the deviceCategories discovery service to find the device categories that are available to meet your criteria, so that you can use the deviceCategoryCode from the service response to request data using the dataProductDelivery service.  Get all device categoriesThis example returns all of the device categories and prints the results, one device category at a timePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCateogory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content)) # convert the json response to an object
	for deviceCateogory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
      
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get the device category for a specific deviceCategoryCodeThis example returns the device category for the deviceCategoryCode 'ADCP150KHZ' and prints the results.Parameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCateogories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCateogories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];
      
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all device categories which have a certain word in the nameThis example returns all of the device categories which have the 'adcp' in the name and prints the results, one device category at a time. The deviceCategoryName filter is case in-sensitive, so capitalized 'ADCP' will also be returned.Parameters:deviceCategoryName=adcpPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryName':'adcp'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryName':'adcp'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryName=adcp'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryName="adcp"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all device categories which have a certain word in the descriptionThis example returns all of the device categories which have the 'doppler' in the description and prints the results, one device category at a time. The description filter is case in-sensitive, so capitalized 'Doppler' will also be returned.Parameters:description=dopplerPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'description':'doppler'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'description':'doppler'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&description=doppler'];


request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      description="doppler"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all of the device categories that are available at a specific locationThis example returns all of the device categories that are available at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one device category at a time. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all the device categories which have devices that have a specific propertyThis example returns all of the device categories which have devices with the property 'salinity' and prints the results, one device category at a time. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=salinityPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=differentialtemperature'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="differentialtemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the deployments discovery service to obtain the locationCode, deviceCode, deployment dates and spatial information from the service response. Use the locationCode or deviceCode and begin and end dates to request data using the dataProductDelivery service.  Get all DeploymentsThis example returns all Deployments and prints the results.Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments= json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
     
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments for a specific device codeThis example returns the Deployments for the device with deviceCode 'NORTEKAQDPRO8398' and prints the results. The deviceCode filter is case sensitive and must match a valid deviceCode exactly.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end

R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments at a specific locationThis example returns all Deployments at the location with locationCode 'BACAX' and prints out the results. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments with a specific device categoryThis example returns all Deployments with the deviceCategoryCode 'ADCP2MHZ' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP2MHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP2MHZ'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP2MHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments with a specific propertyThis example returns all Deployments with instruments that measure the property 'oxygen' and prints the results. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=oxygenPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=oxygen'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="oxygen"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments with a specific device category and a specific propertyThis example returns all Deployments that have devices with the device category 'CTD' and property 'pressure' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:deviceCategoryCode=CTDpropertyCode=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=CTD' ...
        '&propertyCode=pressure'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments between two datesThis example returns all Deployments between 1 July 2010 and 30 June 2012, and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments= json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments at a specific location, between two datesThis example returns all Deployments deployed between 1July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXdateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments at a specific location, between two dates, with a sensor with a specific property codeThis example returns all Deployments between 1 July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), with the propertyCode 'seawatertemperature', and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXpropertyCode=seawatertemperaturedateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&propertyCode=seawatertemperature' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2011-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      propertyCode="seawatertemperature",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the devices discovery service to obtain the deviceCode from the service response. Use the deviceCode to request data using the dataProductDelivery service.  Get all DevicesThis example returns all Devices and prints the results.Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
     
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get the device for a specific device codeThis example returns the device with deviceCode 'NORTEKAQDPRO8398' and prints the results. The deviceCode filter is case sensitive and must match a valid deviceCode exactly.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end

R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices which have a certain word in the nameThis example returns all Devices with 'jasco' in the name and prints the results. The deviceName filter is NOT case sensitive, so capitalized 'JASCO' will also be returned.Parameters:locationName=underwaterPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceName':'jasco'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceName':'jasco'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceName=jasco'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceName="jasco"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all of the devices that have been depolyed at a specific locationThis example returns all Devices that have been deployed at the location with locationCode 'BACAX' and prints out the results. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices with a specific device categoryThis example returns all Devices with the deviceCategoryCode 'ADCP2MHZ' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP2MHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP2MHZ'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP2MHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices with a specific propertyThis example returns all Devices that measures the property 'oxygen' and prints the results. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=oxygenPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=oxygen'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="oxygen"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices with a specific device category and a specific propertyThis example returns all Devices that has the device category 'CTD' and property 'pressure' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:deviceCategoryCode=CTDpropertyCode=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=CTD' ...
        '&propertyCode=pressure'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices that support a specific data product codeThis example returns all Devices that support the dataProductCode 'IBPP' ('Ice Buoy Profile Plots') and prints the results. The dataProductCode filter is case sensitive and must match a valid dataProductCode exactly. See dataProductCode service for further details.Parameters:dataProductCode=IBPPPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductCode=IBPP'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductCode="IBPP"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices that were deployed between two datesThis example returns all Devices deployed between 1 July 2010 and 30 June 2012, and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:dateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices deployed at a specific location, between two datesThis example returns all Devices deployed between 1July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXdateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices deployed at a specific location, between two dates, with a sensor with a specific property codeThis example returns all Devices deployed between 1 July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), with the propertyCode 'seawatertemperature', and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXpropertyCode=seawatertemperaturedateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&propertyCode=seawatertemperature' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2011-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      propertyCode="seawatertemperature",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the locations discovery service to obtain the locationCode from the service response. Use the locationCode to request data via the dataProductDelivery service.  Get all LocationsThis example returns all Locations and prints the results.Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];			%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get the location for a specific location codeThis example returns the location with locationCode 'BACAX' and prints out the results. The locationCode filter is case sensitive and must match a valid locationCode exactly.Parameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile
        '&locationCode=BACAX'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations, including and below a location in the Oceans 2.0 GUIThis example returns all Locations including and below location 'NEP' ('Northeast Pacific') in the Oceans 2.0 Data Search Tree and prints out the results. The locationCode and includeChildren filters are case sensitive and must match exactly.Parameters:locationCode=NEPincludeChildren=truePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'NEP',
			'includeChidren':'true'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'NEP',
			'includeChidren':'true'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&locationCode=NEP' ...
        '&includeChildren=true'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      locationCode="NEP",
                      includeChildren="true"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations which have a certain word in the nameThis example returns all Locations with 'underwater' as part of the name, and prints the results. The locationName filter is NOT case sensitive, so capitalized 'Underwater' will also be returned.Parameters:locationName=underwaterPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationName':'underwater'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationName':'underwater'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&locationName=underwater'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      locationName="underwater"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments of a specific device categoryThis example returns all locations which have at least one instrument for the deviceCategoryCode 'ADCP150KHZ' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details.Parameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments that have a specific propertyThis example returns all Locations with at least one instrument that measures the property 'differentialtermperature' and prints the results. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=differentialtemperaturePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&propertyCode=differentialtemperature'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      propertyCode="differentialtemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments that have a specific device category and a specific propertyThis example returns all Locations with at least one instrument that has the device category 'CTD' and property 'pressure' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:deviceCategoryCode=CTDpropertyCode=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&deviceCategoryCode=CTD' ...
        '&propertyCode=pressure'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      deviceCategoryCode="CTD",
                      propertyCode="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations where a specific device has been deployedThis example returns all locations where a device with the deviceCode 'NORTEKAQDPRO8398' has been deployed and prints the results. The deviceCode filter is case sensitive and must match a valid deviceCode exactly. See devices service for further details.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments that support a specific data product codeThis example returns all Locations with instruments that support the dataProductCode 'IBPP' ('Ice Buoy Profile Plots') and prints the results. The dataProductCode filter is case sensitive and must match a valid dataProductCode exactly. See dataProductCode service for further details.Parameters:dataProductCode=IBPPPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&dataProductCode=IBPP'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      dataProductCode="IBPP"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments deployed between two datesThis example returns all Locations with instruments that were deployed between 1 July 2010 and 30 June 2012, and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:dateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at http://data.oceannetworks.ca/Profile
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments deployed between two dates, with a sensor for a specific propertyThis example returns all Locations with instruments that were deployed between 1 July 2010 and 30 June 2011 and have a sensor for the propertyCode 'seawatertemperature', and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:propertyCode=seawatertemperaturedateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&propertyCode=seawatertemperature' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      propertyCode="seawatertemperature",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get location hierarchy including and below a specific locationThis example returns the Location hierarchy from the 'MOBP' ('Mobile Platforms') node and below, and prints the locationCode and Name, indented for each tree level. If the locationCode parameter is excluded, the entire Oceans 2.0 Tree structure is returned.Parameters:locationCode=MOBPPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'getTree',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'MOBP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	print('Locations')
	locations = json.loads(str(response.content,'utf-8'))
	for location in locations:
		locationCode = location['locationCode']
		locationName = location['locationName']
		children = location['children']
		print('{0} - {1}'.format(locationCode,locationName))

		if (children):
			for child in children:
				getLocationChild(child,2)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))
 
 
def getLocationChild(location,level):
	locationCode = location['locationCode']
	locationName = location['locationName']
	children = location['children']
	sTab = "  ".join(["" for r in range(0,level)])
	print('{0}{1} - {2}'.format(sTab,locationCode,locationName))
 
	if (children):
		for child in children:
			getLocationChild(child,level+1)


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'getTree',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'MOBP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	print('Locations')
	locations = json.loads(str(response.content))
	for location in locations:
		locationCode = location['locationCode']
		locationName = location['locationName']
		children = location['children']
		print('{0} - {1}'.format(locationCode,locationName))

		if (children):
			for child in children:
				getLocationChild(child,2)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))
 
 
def getLocationChild(location,level):
	locationCode = location['locationCode']
	locationName = location['locationName']
	children = location['children']
	sTab = "  ".join(["" for r in range(0,level)])
	print('{0}{1} - {2}'.format(sTab,locationCode,locationName))
 
	if (children):
		for child in children:
			getLocationChild(child,level+1)

MATLAB
getLocationsHierarchy()
 
function getLocationsHierarchy()
            
    url = ['https://data.oceannetworks.ca/api/locations?' ...
            '&method=getTree' ...
            '&token=YOUR_TOKEN_HERE'];							%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
            '&locationCode=MOBP'];

    request = matlab.net.http.RequestMessage;
    uri = matlab.net.URI(url);
    options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

    response = send(request,uri,options);

    if (response.StatusCode == 200)    % HTTP Status - OK
        locations = response.Body.Data;
        
        for i=1:numel(locations)
            location = locations(i);
            
            disp(sprintf('%s - %s',location.locationCode,location.locationName));
            
            if (numel(location.children) >= 1)
                for c=1:numel(location.children)
                    getLocationChild(location.children(c),1);
                end
            end
        end
    elseif (response.StatusCode == 400) % HTTP Status - Bad Request
        disp(response.Body.Data.errors);
    else % all other HTTP Statuses
        disp(char(response.StatusLine));
    end
end

function getLocationChild(location,level)
    sTab = '';
    for t=1:level
        sTab = sprintf('\t %s',sTab);
    end
    
    disp(sprintf('%s %s - %s',sTab, location.locationCode,location.locationName));
            
    if (numel(location.children) >= 1)
        for c=1:numel(location.children)
            getLocationChild(location.children(c),level + 1);
        end
    end
end
R
library(httr)


getChildLocation <- function(location,level){
  sTab = ""
  for (t in 1:level){
    sTab = sprintf("  %s",sTab)
  }
  
  cat(sprintf("%s%s - %s\n",sTab, location$locationCode,location$locationName))
  
  children=location$children
  newLevel=level+1
  for (child in children) {
    getChildLocation(child,newLevel)
  }
  return()
}


r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="getTree", 
                      token="b6ede000-1865-4ac3-94ad-e87d8bdfd307", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      locationCode="MOBP"))
if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    cat(sprintf("%s - %s\n",location$locationCode,location$locationName))
    children = location$children
    for (child in children) {
      getChildLocation(child,1)
    }
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the dataProducts discovery service to find the data products that meet your criteria, so that you can use the dataProductCode from the service response to request data using the dataProductDelivery service.  Get all data product extensionsThis example returns all of the data product extensions and prints the results, one data product extension at a timePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get the data product extensions for a specific dataProductCodeThis example returns all of the data product extensions for the dataProductCode 'TSSD' ('Time Series Scalar Data') and prints the results, one data product extension at a time.Parameters:dataProductCode=TSSDPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'TSSD'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProducts)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'TSSD'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProducts)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductCode=TSSD'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductCode="TSSD"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions available for a specific extensionThis example returns all of the data product extensions which are available for the extension 'pdf' prints the results, one data product extension at a time. The extension filter is case sensitive and must match a valid extension exactly.Parameters:extension=pdfPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'pdf'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'pdf'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&extension=pdf'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      extension="pdf"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions available for a specific data product code and specific extensionThis example returns all of the data product extensions which are available for the dataProductCode 'TSSD' and extension 'csv' prints the results, one data product extension at a time. The dataProductCode filter is case sensitive and must match a valid dataProductCode exactly. The extension filter is case sensitive and must match a valid extension exactly.Parameters:dataProductCode=TSSDextension=cvsPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductcode':'TSSD',
			'extension':'csv'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductcode':'TSSD',
			'extension':'csv'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductCode=TSSD' ...
        '&extension=csv'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductCode="TSD",
                      extension="csv"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions which have a certain word in the nameThis example returns all of the data product extensions which have the 'scalar' in the name and prints the results, one data product extension at a time. The dataProductName filter is case in-sensitive, so capitalized 'Scalar' will also be returned.Parameters:dataProductName=scalarPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductName':'scalar'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductName':'scalar'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductName=scalar'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductName="scalar"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions that are available at a specific locationThis example returns all of the data product extensions that are available at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one data product extension at a time. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions that are available for a specific extension at a specific locationThis example returns all of the data product extensions that are available for the extension 'mat' at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one data product extension at a time. The extension filter is case sensitive and must match a valid extension exactly. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further details.Parameters:extension=matlocationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'mat',
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'mat',
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&extension=mat' ...
        '&locationCode=BACAX'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      extension="mat",
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product codes that are available on a specific device has been deployedThis example returns all of the data product codes available for a device with the deviceCode 'NORTEKAQDPRO8398' and prints the results, one data product code at a time. The deviceCode filter is case sensitive and must match a valid deviceCode exactly. See devices service for further details.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions with a specific propertyThis example returns all of the data product extensions which have the property 'seawatertemperature' and prints the results, one data product extension at a time. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=seawatertemperaturePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=seawatertemperature'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="seawatertemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions that are available for a specific device categoryThis example returns all of the data product extension which are available for the device category 'ADCP 150 kHz' and prints the results, one data product extension at a time. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the properties discovery service to find the properties that are available that meet your criteria, so that you can use the propertyCode from the service response to request data using the dataProductDelivery service.  Get all propertiesThis example returns all of the properties and prints the results, one property at a timePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get the property for a specific propertyCodeThis example returns the property for the propertyCode 'seawatertemperature' and prints the results.Parameters:proprtyCode=seawatertemperaturePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=seawatertemperature'];
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="seawatertemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all properties which have a certain word in the nameThis example returns all of the properties which have the 'pressure' in the name and prints the results, one property at a time. The propertyName filter is case in-sensitive, so capitalized 'Pressure' will also be returned.Parameters:propertyName=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyName':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyName':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyName=pressure'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyName="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all of the properties that are available at a specific locationThis example returns all of the device categories that are available at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one property at a time. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all properties that are available on a specific device has been deployedThis example returns all of the properties available for a device with the deviceCode 'NORTEKAQDPRO8398' and prints the results, one property at a time. The deviceCode filter is case sensitive and must match a valid deviceCode exactly. See devices service for further details.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all properties that are available for a specific device categoryThis example returns all of the properties which are available for the device category 'ADCP 150 kHz' and prints the results, one property at a time. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the deviceCategories discovery service to find the device categories that are available to meet your criteria, so that you can use the deviceCategoryCode from the service response to request data using the dataProductDelivery service.  Get all device categoriesThis example returns all of the device categories and prints the results, one device category at a timePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCateogory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content)) # convert the json response to an object
	for deviceCateogory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
      
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get the device category for a specific deviceCategoryCodeThis example returns the device category for the deviceCategoryCode 'ADCP150KHZ' and prints the results.Parameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCateogories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCateogories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];
      
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all device categories which have a certain word in the nameThis example returns all of the device categories which have the 'adcp' in the name and prints the results, one device category at a time. The deviceCategoryName filter is case in-sensitive, so capitalized 'ADCP' will also be returned.Parameters:deviceCategoryName=adcpPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryName':'adcp'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryName':'adcp'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryName=adcp'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryName="adcp"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all device categories which have a certain word in the descriptionThis example returns all of the device categories which have the 'doppler' in the description and prints the results, one device category at a time. The description filter is case in-sensitive, so capitalized 'Doppler' will also be returned.Parameters:description=dopplerPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'description':'doppler'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'description':'doppler'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&description=doppler'];


request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      description="doppler"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all of the device categories that are available at a specific locationThis example returns all of the device categories that are available at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one device category at a time. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all the device categories which have devices that have a specific propertyThis example returns all of the device categories which have devices with the property 'salinity' and prints the results, one device category at a time. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=salinityPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=differentialtemperature'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="differentialtemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the deployments discovery service to obtain the locationCode, deviceCode, deployment dates and spatial information from the service response. Use the locationCode or deviceCode and begin and end dates to request data using the dataProductDelivery service.  Get all DeploymentsThis example returns all Deployments and prints the results.Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments= json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
     
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments for a specific device codeThis example returns the Deployments for the device with deviceCode 'NORTEKAQDPRO8398' and prints the results. The deviceCode filter is case sensitive and must match a valid deviceCode exactly.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end

R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments at a specific locationThis example returns all Deployments at the location with locationCode 'BACAX' and prints out the results. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments with a specific device categoryThis example returns all Deployments with the deviceCategoryCode 'ADCP2MHZ' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP2MHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP2MHZ'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP2MHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments with a specific propertyThis example returns all Deployments with instruments that measure the property 'oxygen' and prints the results. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=oxygenPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=oxygen'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="oxygen"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments with a specific device category and a specific propertyThis example returns all Deployments that have devices with the device category 'CTD' and property 'pressure' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:deviceCategoryCode=CTDpropertyCode=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=CTD' ...
        '&propertyCode=pressure'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments between two datesThis example returns all Deployments between 1 July 2010 and 30 June 2012, and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments= json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments at a specific location, between two datesThis example returns all Deployments deployed between 1July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXdateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments at a specific location, between two dates, with a sensor with a specific property codeThis example returns all Deployments between 1 July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), with the propertyCode 'seawatertemperature', and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXpropertyCode=seawatertemperaturedateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&propertyCode=seawatertemperature' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2011-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      propertyCode="seawatertemperature",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the devices discovery service to obtain the deviceCode from the service response. Use the deviceCode to request data using the dataProductDelivery service.  Get all DevicesThis example returns all Devices and prints the results.Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
     
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get the device for a specific device codeThis example returns the device with deviceCode 'NORTEKAQDPRO8398' and prints the results. The deviceCode filter is case sensitive and must match a valid deviceCode exactly.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end

R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices which have a certain word in the nameThis example returns all Devices with 'jasco' in the name and prints the results. The deviceName filter is NOT case sensitive, so capitalized 'JASCO' will also be returned.Parameters:locationName=underwaterPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceName':'jasco'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceName':'jasco'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceName=jasco'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceName="jasco"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all of the devices that have been depolyed at a specific locationThis example returns all Devices that have been deployed at the location with locationCode 'BACAX' and prints out the results. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices with a specific device categoryThis example returns all Devices with the deviceCategoryCode 'ADCP2MHZ' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP2MHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP2MHZ'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP2MHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices with a specific propertyThis example returns all Devices that measures the property 'oxygen' and prints the results. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=oxygenPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=oxygen'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="oxygen"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices with a specific device category and a specific propertyThis example returns all Devices that has the device category 'CTD' and property 'pressure' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:deviceCategoryCode=CTDpropertyCode=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=CTD' ...
        '&propertyCode=pressure'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices that support a specific data product codeThis example returns all Devices that support the dataProductCode 'IBPP' ('Ice Buoy Profile Plots') and prints the results. The dataProductCode filter is case sensitive and must match a valid dataProductCode exactly. See dataProductCode service for further details.Parameters:dataProductCode=IBPPPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductCode=IBPP'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductCode="IBPP"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices that were deployed between two datesThis example returns all Devices deployed between 1 July 2010 and 30 June 2012, and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:dateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices deployed at a specific location, between two datesThis example returns all Devices deployed between 1July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXdateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices deployed at a specific location, between two dates, with a sensor with a specific property codeThis example returns all Devices deployed between 1 July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), with the propertyCode 'seawatertemperature', and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXpropertyCode=seawatertemperaturedateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&propertyCode=seawatertemperature' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2011-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      propertyCode="seawatertemperature",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the locations discovery service to obtain the locationCode from the service response. Use the locationCode to request data via the dataProductDelivery service.  Get all LocationsThis example returns all Locations and prints the results.Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];			%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get the location for a specific location codeThis example returns the location with locationCode 'BACAX' and prints out the results. The locationCode filter is case sensitive and must match a valid locationCode exactly.Parameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile
        '&locationCode=BACAX'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations, including and below a location in the Oceans 2.0 GUIThis example returns all Locations including and below location 'NEP' ('Northeast Pacific') in the Oceans 2.0 Data Search Tree and prints out the results. The locationCode and includeChildren filters are case sensitive and must match exactly.Parameters:locationCode=NEPincludeChildren=truePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'NEP',
			'includeChidren':'true'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'NEP',
			'includeChidren':'true'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&locationCode=NEP' ...
        '&includeChildren=true'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      locationCode="NEP",
                      includeChildren="true"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations which have a certain word in the nameThis example returns all Locations with 'underwater' as part of the name, and prints the results. The locationName filter is NOT case sensitive, so capitalized 'Underwater' will also be returned.Parameters:locationName=underwaterPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationName':'underwater'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationName':'underwater'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&locationName=underwater'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      locationName="underwater"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments of a specific device categoryThis example returns all locations which have at least one instrument for the deviceCategoryCode 'ADCP150KHZ' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details.Parameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments that have a specific propertyThis example returns all Locations with at least one instrument that measures the property 'differentialtermperature' and prints the results. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=differentialtemperaturePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&propertyCode=differentialtemperature'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      propertyCode="differentialtemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments that have a specific device category and a specific propertyThis example returns all Locations with at least one instrument that has the device category 'CTD' and property 'pressure' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:deviceCategoryCode=CTDpropertyCode=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&deviceCategoryCode=CTD' ...
        '&propertyCode=pressure'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      deviceCategoryCode="CTD",
                      propertyCode="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations where a specific device has been deployedThis example returns all locations where a device with the deviceCode 'NORTEKAQDPRO8398' has been deployed and prints the results. The deviceCode filter is case sensitive and must match a valid deviceCode exactly. See devices service for further details.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments that support a specific data product codeThis example returns all Locations with instruments that support the dataProductCode 'IBPP' ('Ice Buoy Profile Plots') and prints the results. The dataProductCode filter is case sensitive and must match a valid dataProductCode exactly. See dataProductCode service for further details.Parameters:dataProductCode=IBPPPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&dataProductCode=IBPP'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      dataProductCode="IBPP"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments deployed between two datesThis example returns all Locations with instruments that were deployed between 1 July 2010 and 30 June 2012, and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:dateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at http://data.oceannetworks.ca/Profile
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments deployed between two dates, with a sensor for a specific propertyThis example returns all Locations with instruments that were deployed between 1 July 2010 and 30 June 2011 and have a sensor for the propertyCode 'seawatertemperature', and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:propertyCode=seawatertemperaturedateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&propertyCode=seawatertemperature' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      propertyCode="seawatertemperature",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get location hierarchy including and below a specific locationThis example returns the Location hierarchy from the 'MOBP' ('Mobile Platforms') node and below, and prints the locationCode and Name, indented for each tree level. If the locationCode parameter is excluded, the entire Oceans 2.0 Tree structure is returned.Parameters:locationCode=MOBPPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'getTree',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'MOBP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	print('Locations')
	locations = json.loads(str(response.content,'utf-8'))
	for location in locations:
		locationCode = location['locationCode']
		locationName = location['locationName']
		children = location['children']
		print('{0} - {1}'.format(locationCode,locationName))

		if (children):
			for child in children:
				getLocationChild(child,2)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))
 
 
def getLocationChild(location,level):
	locationCode = location['locationCode']
	locationName = location['locationName']
	children = location['children']
	sTab = "  ".join(["" for r in range(0,level)])
	print('{0}{1} - {2}'.format(sTab,locationCode,locationName))
 
	if (children):
		for child in children:
			getLocationChild(child,level+1)


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'getTree',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'MOBP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	print('Locations')
	locations = json.loads(str(response.content))
	for location in locations:
		locationCode = location['locationCode']
		locationName = location['locationName']
		children = location['children']
		print('{0} - {1}'.format(locationCode,locationName))

		if (children):
			for child in children:
				getLocationChild(child,2)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))
 
 
def getLocationChild(location,level):
	locationCode = location['locationCode']
	locationName = location['locationName']
	children = location['children']
	sTab = "  ".join(["" for r in range(0,level)])
	print('{0}{1} - {2}'.format(sTab,locationCode,locationName))
 
	if (children):
		for child in children:
			getLocationChild(child,level+1)

MATLAB
getLocationsHierarchy()
 
function getLocationsHierarchy()
            
    url = ['https://data.oceannetworks.ca/api/locations?' ...
            '&method=getTree' ...
            '&token=YOUR_TOKEN_HERE'];							%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
            '&locationCode=MOBP'];

    request = matlab.net.http.RequestMessage;
    uri = matlab.net.URI(url);
    options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

    response = send(request,uri,options);

    if (response.StatusCode == 200)    % HTTP Status - OK
        locations = response.Body.Data;
        
        for i=1:numel(locations)
            location = locations(i);
            
            disp(sprintf('%s - %s',location.locationCode,location.locationName));
            
            if (numel(location.children) >= 1)
                for c=1:numel(location.children)
                    getLocationChild(location.children(c),1);
                end
            end
        end
    elseif (response.StatusCode == 400) % HTTP Status - Bad Request
        disp(response.Body.Data.errors);
    else % all other HTTP Statuses
        disp(char(response.StatusLine));
    end
end

function getLocationChild(location,level)
    sTab = '';
    for t=1:level
        sTab = sprintf('\t %s',sTab);
    end
    
    disp(sprintf('%s %s - %s',sTab, location.locationCode,location.locationName));
            
    if (numel(location.children) >= 1)
        for c=1:numel(location.children)
            getLocationChild(location.children(c),level + 1);
        end
    end
end
R
library(httr)


getChildLocation <- function(location,level){
  sTab = ""
  for (t in 1:level){
    sTab = sprintf("  %s",sTab)
  }
  
  cat(sprintf("%s%s - %s\n",sTab, location$locationCode,location$locationName))
  
  children=location$children
  newLevel=level+1
  for (child in children) {
    getChildLocation(child,newLevel)
  }
  return()
}


r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="getTree", 
                      token="b6ede000-1865-4ac3-94ad-e87d8bdfd307", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      locationCode="MOBP"))
if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    cat(sprintf("%s - %s\n",location$locationCode,location$locationName))
    children = location$children
    for (child in children) {
      getChildLocation(child,1)
    }
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the dataProducts discovery service to find the data products that meet your criteria, so that you can use the dataProductCode from the service response to request data using the dataProductDelivery service.  Get all data product extensionsThis example returns all of the data product extensions and prints the results, one data product extension at a timePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get the data product extensions for a specific dataProductCodeThis example returns all of the data product extensions for the dataProductCode 'TSSD' ('Time Series Scalar Data') and prints the results, one data product extension at a time.Parameters:dataProductCode=TSSDPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'TSSD'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProducts)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'TSSD'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProducts)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductCode=TSSD'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductCode="TSSD"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions available for a specific extensionThis example returns all of the data product extensions which are available for the extension 'pdf' prints the results, one data product extension at a time. The extension filter is case sensitive and must match a valid extension exactly.Parameters:extension=pdfPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'pdf'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'pdf'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&extension=pdf'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      extension="pdf"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions available for a specific data product code and specific extensionThis example returns all of the data product extensions which are available for the dataProductCode 'TSSD' and extension 'csv' prints the results, one data product extension at a time. The dataProductCode filter is case sensitive and must match a valid dataProductCode exactly. The extension filter is case sensitive and must match a valid extension exactly.Parameters:dataProductCode=TSSDextension=cvsPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductcode':'TSSD',
			'extension':'csv'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductcode':'TSSD',
			'extension':'csv'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductCode=TSSD' ...
        '&extension=csv'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductCode="TSD",
                      extension="csv"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions which have a certain word in the nameThis example returns all of the data product extensions which have the 'scalar' in the name and prints the results, one data product extension at a time. The dataProductName filter is case in-sensitive, so capitalized 'Scalar' will also be returned.Parameters:dataProductName=scalarPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductName':'scalar'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductName':'scalar'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductName=scalar'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductName="scalar"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions that are available at a specific locationThis example returns all of the data product extensions that are available at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one data product extension at a time. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions that are available for a specific extension at a specific locationThis example returns all of the data product extensions that are available for the extension 'mat' at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one data product extension at a time. The extension filter is case sensitive and must match a valid extension exactly. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further details.Parameters:extension=matlocationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'mat',
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'mat',
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&extension=mat' ...
        '&locationCode=BACAX'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      extension="mat",
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product codes that are available on a specific device has been deployedThis example returns all of the data product codes available for a device with the deviceCode 'NORTEKAQDPRO8398' and prints the results, one data product code at a time. The deviceCode filter is case sensitive and must match a valid deviceCode exactly. See devices service for further details.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions with a specific propertyThis example returns all of the data product extensions which have the property 'seawatertemperature' and prints the results, one data product extension at a time. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=seawatertemperaturePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=seawatertemperature'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="seawatertemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions that are available for a specific device categoryThis example returns all of the data product extension which are available for the device category 'ADCP 150 kHz' and prints the results, one data product extension at a time. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the properties discovery service to find the properties that are available that meet your criteria, so that you can use the propertyCode from the service response to request data using the dataProductDelivery service.  Get all propertiesThis example returns all of the properties and prints the results, one property at a timePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get the property for a specific propertyCodeThis example returns the property for the propertyCode 'seawatertemperature' and prints the results.Parameters:proprtyCode=seawatertemperaturePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=seawatertemperature'];
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="seawatertemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all properties which have a certain word in the nameThis example returns all of the properties which have the 'pressure' in the name and prints the results, one property at a time. The propertyName filter is case in-sensitive, so capitalized 'Pressure' will also be returned.Parameters:propertyName=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyName':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyName':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyName=pressure'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyName="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all of the properties that are available at a specific locationThis example returns all of the device categories that are available at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one property at a time. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all properties that are available on a specific device has been deployedThis example returns all of the properties available for a device with the deviceCode 'NORTEKAQDPRO8398' and prints the results, one property at a time. The deviceCode filter is case sensitive and must match a valid deviceCode exactly. See devices service for further details.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all properties that are available for a specific device categoryThis example returns all of the properties which are available for the device category 'ADCP 150 kHz' and prints the results, one property at a time. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the deviceCategories discovery service to find the device categories that are available to meet your criteria, so that you can use the deviceCategoryCode from the service response to request data using the dataProductDelivery service.  Get all device categoriesThis example returns all of the device categories and prints the results, one device category at a timePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCateogory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content)) # convert the json response to an object
	for deviceCateogory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
      
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get the device category for a specific deviceCategoryCodeThis example returns the device category for the deviceCategoryCode 'ADCP150KHZ' and prints the results.Parameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCateogories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCateogories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];
      
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all device categories which have a certain word in the nameThis example returns all of the device categories which have the 'adcp' in the name and prints the results, one device category at a time. The deviceCategoryName filter is case in-sensitive, so capitalized 'ADCP' will also be returned.Parameters:deviceCategoryName=adcpPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryName':'adcp'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryName':'adcp'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryName=adcp'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryName="adcp"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all device categories which have a certain word in the descriptionThis example returns all of the device categories which have the 'doppler' in the description and prints the results, one device category at a time. The description filter is case in-sensitive, so capitalized 'Doppler' will also be returned.Parameters:description=dopplerPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'description':'doppler'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'description':'doppler'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&description=doppler'];


request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      description="doppler"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all of the device categories that are available at a specific locationThis example returns all of the device categories that are available at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one device category at a time. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories= json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
 Get all the device categories which have devices that have a specific propertyThis example returns all of the device categories which have devices with the property 'salinity' and prints the results, one device category at a time. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=salinityPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deviceCategories'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deviceCategories = json.loads(str(response.content)) # convert the json response to an object
	for deviceCategory in deviceCategories:
		print(deviceCategory)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deviceCategories' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=differentialtemperature'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    deviceCategories = response.Body.Data;
    for i=1:numel(deviceCategories)
        deviceCategory = deviceCategories(i);
        disp(deviceCategory);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deviceCategories", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="differentialtemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deviceCategories = content(r)
  for (deviceCategory in deviceCategories){
    str(deviceCategory)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the deployments discovery service to obtain the locationCode, deviceCode, deployment dates and spatial information from the service response. Use the locationCode or deviceCode and begin and end dates to request data using the dataProductDelivery service.  Get all DeploymentsThis example returns all Deployments and prints the results.Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments= json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
     
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments for a specific device codeThis example returns the Deployments for the device with deviceCode 'NORTEKAQDPRO8398' and prints the results. The deviceCode filter is case sensitive and must match a valid deviceCode exactly.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end

R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments at a specific locationThis example returns all Deployments at the location with locationCode 'BACAX' and prints out the results. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments with a specific device categoryThis example returns all Deployments with the deviceCategoryCode 'ADCP2MHZ' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP2MHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP2MHZ'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP2MHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments with a specific propertyThis example returns all Deployments with instruments that measure the property 'oxygen' and prints the results. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=oxygenPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=oxygen'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="oxygen"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments with a specific device category and a specific propertyThis example returns all Deployments that have devices with the device category 'CTD' and property 'pressure' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:deviceCategoryCode=CTDpropertyCode=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=CTD' ...
        '&propertyCode=pressure'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments between two datesThis example returns all Deployments between 1 July 2010 and 30 June 2012, and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments= json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments at a specific location, between two datesThis example returns all Deployments deployed between 1July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXdateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Get all Deployments at a specific location, between two dates, with a sensor with a specific property codeThis example returns all Deployments between 1 July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), with the propertyCode 'seawatertemperature', and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXpropertyCode=seawatertemperaturedateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/deployments'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	deployments = json.loads(str(response.content)) # convert the json response to an object
	for deployment in deployments:
		print(deployment)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/deployments' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&propertyCode=seawatertemperature' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2011-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    deployments = response.Body.Data;
    for i=1:numel(deployments)
        deployment = deployments(i);
        disp(deployment);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/deployments", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      propertyCode="seawatertemperature",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  deployments = content(r)
  for (deployment in deployments){
    str(deployment)
  }
}
 Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the devices discovery service to obtain the deviceCode from the service response. Use the deviceCode to request data using the dataProductDelivery service.  Get all DevicesThis example returns all Devices and prints the results.Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
     
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get the device for a specific device codeThis example returns the device with deviceCode 'NORTEKAQDPRO8398' and prints the results. The deviceCode filter is case sensitive and must match a valid deviceCode exactly.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end

R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices which have a certain word in the nameThis example returns all Devices with 'jasco' in the name and prints the results. The deviceName filter is NOT case sensitive, so capitalized 'JASCO' will also be returned.Parameters:locationName=underwaterPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceName':'jasco'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceName':'jasco'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceName=jasco'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceName="jasco"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all of the devices that have been depolyed at a specific locationThis example returns all Devices that have been deployed at the location with locationCode 'BACAX' and prints out the results. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices with a specific device categoryThis example returns all Devices with the deviceCategoryCode 'ADCP2MHZ' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP2MHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP2MHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP2MHZ'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP2MHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices with a specific propertyThis example returns all Devices that measures the property 'oxygen' and prints the results. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=oxygenPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'oxygen'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=oxygen'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="oxygen"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices with a specific device category and a specific propertyThis example returns all Devices that has the device category 'CTD' and property 'pressure' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:deviceCategoryCode=CTDpropertyCode=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=CTD' ...
        '&propertyCode=pressure'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices that support a specific data product codeThis example returns all Devices that support the dataProductCode 'IBPP' ('Ice Buoy Profile Plots') and prints the results. The dataProductCode filter is case sensitive and must match a valid dataProductCode exactly. See dataProductCode service for further details.Parameters:dataProductCode=IBPPPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductCode=IBPP'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductCode="IBPP"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices that were deployed between two datesThis example returns all Devices deployed between 1 July 2010 and 30 June 2012, and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:dateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices= json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices deployed at a specific location, between two datesThis example returns all Devices deployed between 1July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXdateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
 Get all devices deployed at a specific location, between two dates, with a sensor with a specific property codeThis example returns all Devices deployed between 1 July 2010 and 30 June 2011, at the location with the locationCode 'BACAX' ('Barkely Canyon Axis (POD1)'), with the propertyCode 'seawatertemperature', and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:locationCode=BACAXpropertyCode=seawatertemperaturedateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/devices'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX',
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	devices = json.loads(str(response.content)) # convert the json response to an object
	for device in devices:
		print(device)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/devices' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...           %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX' ...
        '&propertyCode=seawatertemperature' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2011-06-30T23:59:59.999Z'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
 
response = send(request,uri,options);
 
if (response.StatusCode == 200)    % HTTP Status - OK
    devices = response.Body.Data;
    for i=1:numel(devices)
        device = devices(i);
        disp(device);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/devices", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX",
                      propertyCode="seawatertemperature",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2011-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  devices = content(r)
  for (device in devices){
    str(device)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the locations discovery service to obtain the locationCode from the service response. Use the locationCode to request data via the dataProductDelivery service.  Get all LocationsThis example returns all Locations and prints the results.Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];			%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get the location for a specific location codeThis example returns the location with locationCode 'BACAX' and prints out the results. The locationCode filter is case sensitive and must match a valid locationCode exactly.Parameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile
        '&locationCode=BACAX'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations, including and below a location in the Oceans 2.0 GUIThis example returns all Locations including and below location 'NEP' ('Northeast Pacific') in the Oceans 2.0 Data Search Tree and prints out the results. The locationCode and includeChildren filters are case sensitive and must match exactly.Parameters:locationCode=NEPincludeChildren=truePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'NEP',
			'includeChidren':'true'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'NEP',
			'includeChidren':'true'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&locationCode=NEP' ...
        '&includeChildren=true'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      locationCode="NEP",
                      includeChildren="true"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations which have a certain word in the nameThis example returns all Locations with 'underwater' as part of the name, and prints the results. The locationName filter is NOT case sensitive, so capitalized 'Underwater' will also be returned.Parameters:locationName=underwaterPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationName':'underwater'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationName':'underwater'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&locationName=underwater'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      locationName="underwater"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments of a specific device categoryThis example returns all locations which have at least one instrument for the deviceCategoryCode 'ADCP150KHZ' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details.Parameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments that have a specific propertyThis example returns all Locations with at least one instrument that measures the property 'differentialtermperature' and prints the results. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=differentialtemperaturePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'differentialtemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&propertyCode=differentialtemperature'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      propertyCode="differentialtemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments that have a specific device category and a specific propertyThis example returns all Locations with at least one instrument that has the device category 'CTD' and property 'pressure' and prints the results. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further details. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:deviceCategoryCode=CTDpropertyCode=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCategoryCode':'CTD',
			'propertyCode':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&deviceCategoryCode=CTD' ...
        '&propertyCode=pressure'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      deviceCategoryCode="CTD",
                      propertyCode="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations where a specific device has been deployedThis example returns all locations where a device with the deviceCode 'NORTEKAQDPRO8398' has been deployed and prints the results. The deviceCode filter is case sensitive and must match a valid deviceCode exactly. See devices service for further details.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments that support a specific data product codeThis example returns all Locations with instruments that support the dataProductCode 'IBPP' ('Ice Buoy Profile Plots') and prints the results. The dataProductCode filter is case sensitive and must match a valid dataProductCode exactly. See dataProductCode service for further details.Parameters:dataProductCode=IBPPPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'dataProductCode':'IBPP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&dataProductCode=IBPP'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      dataProductCode="IBPP"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments deployed between two datesThis example returns all Locations with instruments that were deployed between 1 July 2010 and 30 June 2012, and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:dateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at http://data.oceannetworks.ca/Profile
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2012-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get all locations with instruments deployed between two dates, with a sensor for a specific propertyThis example returns all Locations with instruments that were deployed between 1 July 2010 and 30 June 2011 and have a sensor for the propertyCode 'seawatertemperature', and prints the results. Both the dateFrom and dateTo must be included and be valid UTC date/time values in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' and the dateFrom date/time must be before the dateTo date/time.Parameters:propertyCode=seawatertemperaturedateFrom=2010-07-01T00:00:00.000ZdateTo=2012-06-30T23:59:59.999ZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'propertyCode':'seawatertemperature',
			'dateFrom':'2010-07-01T00:00:00.000Z',
			'dateTo':'2011-06-30T23:59:59.999Z'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	locations = json.loads(str(response.content)) # convert the json response to an object
	for location in locations:
		print(location)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/locations' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...						%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
        '&propertyCode=seawatertemperature' ...
        '&dateFrom=2010-07-01T00:00:00.000Z' ...
        '&dateTo=2012-06-30T23:59:59.999Z'];
    
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

response = send(request,uri,options);

if (response.StatusCode == 200)    % HTTP Status - OK
    locations = response.Body.Data;
    for i=1:numel(locations)
        location = locations(i);
        disp(location);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      propertyCode="seawatertemperature",
                      dateFrom="2010-07-01T00:00:00.000Z",
                      dateTo="2012-06-30T23:59:59.999Z"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    str(location)
  }
}
 Get location hierarchy including and below a specific locationThis example returns the Location hierarchy from the 'MOBP' ('Mobile Platforms') node and below, and prints the locationCode and Name, indented for each tree level. If the locationCode parameter is excluded, the entire Oceans 2.0 Tree structure is returned.Parameters:locationCode=MOBPPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'getTree',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'MOBP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	print('Locations')
	locations = json.loads(str(response.content,'utf-8'))
	for location in locations:
		locationCode = location['locationCode']
		locationName = location['locationName']
		children = location['children']
		print('{0} - {1}'.format(locationCode,locationName))

		if (children):
			for child in children:
				getLocationChild(child,2)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))
 
 
def getLocationChild(location,level):
	locationCode = location['locationCode']
	locationName = location['locationName']
	children = location['children']
	sTab = "  ".join(["" for r in range(0,level)])
	print('{0}{1} - {2}'.format(sTab,locationCode,locationName))
 
	if (children):
		for child in children:
			getLocationChild(child,level+1)


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/locations'
parameters = {'method':'getTree',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
			'locationCode':'MOBP'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	print('Locations')
	locations = json.loads(str(response.content))
	for location in locations:
		locationCode = location['locationCode']
		locationName = location['locationName']
		children = location['children']
		print('{0} - {1}'.format(locationCode,locationName))

		if (children):
			for child in children:
				getLocationChild(child,2)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))
 
 
def getLocationChild(location,level):
	locationCode = location['locationCode']
	locationName = location['locationName']
	children = location['children']
	sTab = "  ".join(["" for r in range(0,level)])
	print('{0}{1} - {2}'.format(sTab,locationCode,locationName))
 
	if (children):
		for child in children:
			getLocationChild(child,level+1)

MATLAB
getLocationsHierarchy()
 
function getLocationsHierarchy()
            
    url = ['https://data.oceannetworks.ca/api/locations?' ...
            '&method=getTree' ...
            '&token=YOUR_TOKEN_HERE'];							%replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
            '&locationCode=MOBP'];

    request = matlab.net.http.RequestMessage;
    uri = matlab.net.URI(url);
    options = matlab.net.http.HTTPOptions('ConnectTimeout',60);

    response = send(request,uri,options);

    if (response.StatusCode == 200)    % HTTP Status - OK
        locations = response.Body.Data;
        
        for i=1:numel(locations)
            location = locations(i);
            
            disp(sprintf('%s - %s',location.locationCode,location.locationName));
            
            if (numel(location.children) >= 1)
                for c=1:numel(location.children)
                    getLocationChild(location.children(c),1);
                end
            end
        end
    elseif (response.StatusCode == 400) % HTTP Status - Bad Request
        disp(response.Body.Data.errors);
    else % all other HTTP Statuses
        disp(char(response.StatusLine));
    end
end

function getLocationChild(location,level)
    sTab = '';
    for t=1:level
        sTab = sprintf('\t %s',sTab);
    end
    
    disp(sprintf('%s %s - %s',sTab, location.locationCode,location.locationName));
            
    if (numel(location.children) >= 1)
        for c=1:numel(location.children)
            getLocationChild(location.children(c),level + 1);
        end
    end
end
R
library(httr)


getChildLocation <- function(location,level){
  sTab = ""
  for (t in 1:level){
    sTab = sprintf("  %s",sTab)
  }
  
  cat(sprintf("%s%s - %s\n",sTab, location$locationCode,location$locationName))
  
  children=location$children
  newLevel=level+1
  for (child in children) {
    getChildLocation(child,newLevel)
  }
  return()
}


r <- GET("https://data.oceannetworks.ca/api/locations", 
         query = list(method="getTree", 
                      token="b6ede000-1865-4ac3-94ad-e87d8bdfd307", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.can/Profile when logged in.
                      locationCode="MOBP"))
if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  locations = content(r)
  for (location in locations){
    cat(sprintf("%s - %s\n",location$locationCode,location$locationName))
    children = location$children
    for (child in children) {
      getChildLocation(child,1)
    }
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the dataProducts discovery service to find the data products that meet your criteria, so that you can use the dataProductCode from the service response to request data using the dataProductDelivery service.  Get all data product extensionsThis example returns all of the data product extensions and prints the results, one data product extension at a timePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get the data product extensions for a specific dataProductCodeThis example returns all of the data product extensions for the dataProductCode 'TSSD' ('Time Series Scalar Data') and prints the results, one data product extension at a time.Parameters:dataProductCode=TSSDPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'TSSD'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProducts)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductCode':'TSSD'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProducts)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductCode=TSSD'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductCode="TSSD"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions available for a specific extensionThis example returns all of the data product extensions which are available for the extension 'pdf' prints the results, one data product extension at a time. The extension filter is case sensitive and must match a valid extension exactly.Parameters:extension=pdfPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'pdf'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'pdf'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&extension=pdf'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      extension="pdf"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions available for a specific data product code and specific extensionThis example returns all of the data product extensions which are available for the dataProductCode 'TSSD' and extension 'csv' prints the results, one data product extension at a time. The dataProductCode filter is case sensitive and must match a valid dataProductCode exactly. The extension filter is case sensitive and must match a valid extension exactly.Parameters:dataProductCode=TSSDextension=cvsPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductcode':'TSSD',
			'extension':'csv'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductcode':'TSSD',
			'extension':'csv'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductCode=TSSD' ...
        '&extension=csv'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductCode="TSD",
                      extension="csv"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions which have a certain word in the nameThis example returns all of the data product extensions which have the 'scalar' in the name and prints the results, one data product extension at a time. The dataProductName filter is case in-sensitive, so capitalized 'Scalar' will also be returned.Parameters:dataProductName=scalarPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductName':'scalar'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'dataProductName':'scalar'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&dataProductName=scalar'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      dataProductName="scalar"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions that are available at a specific locationThis example returns all of the data product extensions that are available at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one data product extension at a time. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions that are available for a specific extension at a specific locationThis example returns all of the data product extensions that are available for the extension 'mat' at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one data product extension at a time. The extension filter is case sensitive and must match a valid extension exactly. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further details.Parameters:extension=matlocationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'mat',
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'extension':'mat',
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&extension=mat' ...
        '&locationCode=BACAX'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      extension="mat",
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product codes that are available on a specific device has been deployedThis example returns all of the data product codes available for a device with the deviceCode 'NORTEKAQDPRO8398' and prints the results, one data product code at a time. The deviceCode filter is case sensitive and must match a valid deviceCode exactly. See devices service for further details.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts= json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions with a specific propertyThis example returns all of the data product extensions which have the property 'seawatertemperature' and prints the results, one data product extension at a time. The propertyCode filter is case sensitive and must match a valid propertyCode exactly. See properties service for further details.Parameters:propertyCode=seawatertemperaturePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=seawatertemperature'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="seawatertemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
 Get all data product extensions that are available for a specific device categoryThis example returns all of the data product extension which are available for the device category 'ADCP 150 kHz' and prints the results, one data product extension at a time. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/dataProducts'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	dataProducts = json.loads(str(response.content)) # convert the json response to an object
	for dataProduct in dataProducts:
		print(dataProduct)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/dataProducts' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];
 
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
   
response = send(request,uri,options);
   
if (response.StatusCode == 200)    % HTTP Status - OK
    dataProducts= response.Body.Data;
    for i=1:numel(dataProducts)
        dataProduct = dataProducts(i);
        disp(dataProduct);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
 library(httr)
r <- GET("https://data.oceannetworks.ca/api/dataProducts", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  dataProducts = content(r)
  for (dataProduct in dataProducts){
    str(dataProduct)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 


The following samples illustrate how to use the properties discovery service to find the properties that are available that meet your criteria, so that you can use the propertyCode from the service response to request data using the dataProductDelivery service.  Get all propertiesThis example returns all of the properties and prints the results, one property at a timePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE'} # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE'];                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE")) #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get the property for a specific propertyCodeThis example returns the property for the propertyCode 'seawatertemperature' and prints the results.Parameters:proprtyCode=seawatertemperaturePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyCode':'seawatertemperature'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyCode=seawatertemperature'];
request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyCode="seawatertemperature"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all properties which have a certain word in the nameThis example returns all of the properties which have the 'pressure' in the name and prints the results, one property at a time. The propertyName filter is case in-sensitive, so capitalized 'Pressure' will also be returned.Parameters:propertyName=pressurePython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyName':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'propertyName':'pressure'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&propertyName=pressure'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      propertyName="pressure"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all of the properties that are available at a specific locationThis example returns all of the device categories that are available at the location with the locationCode of 'BACAX' ('Barkley Canyon Axis (POD1)' and prints out the results, one property at a time. The locationCode filter is case sensitive and must match a valid locationCode exactly. See locations for further detailsParameters:locationCode=BACAXPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'locationCode':'BACAX'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&locationCode=BACAX'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      locationCode="BACAX"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all properties that are available on a specific device has been deployedThis example returns all of the properties available for a device with the deviceCode 'NORTEKAQDPRO8398' and prints the results, one property at a time. The deviceCode filter is case sensitive and must match a valid deviceCode exactly. See devices service for further details.Parameters:deviceCode=NORTEKAQDPRO8398Python 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCode':'NORTEKAQDPRO8398'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties = json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCode=NORTEKAQDPRO8398'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCode="NORTEKAQDPRO8398"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
 Get all properties that are available for a specific device categoryThis example returns all of the properties which are available for the device category 'ADCP 150 kHz' and prints the results, one property at a time. The deviceCategoryCode filter is case sensitive and must match a valid deviceCategoryCode exactly. See deviceCategories service for further detailsParameters:deviceCategoryCode=ADCP150KHZPython 3.x
import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content,'utf-8')) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content,'utf-8'))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))


Python 2.x
 Expand source
 


import requests
import json
 
url = 'https://data.oceannetworks.ca/api/properties'
parameters = {'method':'get',
			'token':'YOUR_TOKEN_HERE', # replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
			'deviceCategoryCode':'ADCP150KHZ'}
 
response = requests.get(url,params=parameters)
 
if (response.ok):
	properties= json.loads(str(response.content)) # convert the json response to an object
	for property in properties:
		print(property)
else:
	if(response.status_code == 400):
		error = json.loads(str(response.content))
		print(error) # json response contains a list of errors, with an errorMessage and parameter
	else:
		print ('Error {} - {}'.format(response.status_code,response.reason))

MATLAB
url = ['https://data.oceannetworks.ca/api/properties' ...
        '?method=get' ...
        '&token=YOUR_TOKEN_HERE' ...                          %replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
        '&deviceCategoryCode=ADCP150KHZ'];

request = matlab.net.http.RequestMessage;
uri = matlab.net.URI(url);
options = matlab.net.http.HTTPOptions('ConnectTimeout',60);
  
response = send(request,uri,options);
  
if (response.StatusCode == 200)    % HTTP Status - OK
    properties= response.Body.Data;
    for i=1:numel(properties)
        property = properties(i);
        disp(property);
    end
elseif (response.StatusCode == 400) % HTTP Status - Bad Request
    disp(response.Body.Data.errors);
else % all other HTTP Statuses
    disp(char(response.StatusLine));
end
R
library(httr)
r <- GET("https://data.oceannetworks.ca/api/properties", 
         query = list(method="get", 
                      token="YOUR_TOKEN_HERE", #>replace YOUR_TOKEN_HERE with your personal token obtained from the 'Web Services API' tab at https://data.oceannetworks.ca/Profile when logged in.
                      deviceCategoryCode="ADCP150KHZ"))

if (http_error(r)) {
  if (r$status_code == 400){
    error = content(r)
    str(error)
  } else {
    str(http_status(r)$message)
  }
} else {
  properties= content(r)
  for (property in properties){
    str(property)
  }
}
   Please report all issues with the web services, documentation, samples and client libraries to the Oceans 2.0 Help Centre 

